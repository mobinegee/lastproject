userRoutes.post('/add-group', (req, res) => {
    const name = req.body.name;

    const query = `INSERT INTO groups (name) VALUES (?);`
    mobindb.query(query, [name], (err, result) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.status(200).json({ message: 'Group added successfully' });
    });
});

userRoutes.get('/search', (req, res) => {
    const name = req.query.name;
    const productQuery = `SELECT * FROM groups WHERE name LIKE ?`
    mobindb.query(productQuery, [`%${name}%`], (error, result) => {
        if (error) {
            console.error('Error in query:', error);
            res.status(500).json({ error: 'Error querying database' });
        } else {
            res.json(result);
        }
    });
});












      {/* نمایش لیست کاربران گروه */}
      {/* <div>
        <h3>کاربران گروه:</h3>
        <ul>
          {users.map((user, index) => (
            <li key={index}>{user.name}</li>
          ))}
        </ul>
      </div> */}
    // دریافت لیست کاربران از سرور (در اینجا فرض کردیم که یک API برای این کار وجود دارد)
    // fetch(`http://localhost:5200/api/groups/${groupName}/users`)
    //   .then((response) => response.json())
    //   .then((data) => setUsers(data));
















    const express = require('express');
const mobindb = require('../DB/reactshop');  // مسیر دیتابیس

const userRoutes = express.Router();

// Define socket connection setup
const setupSocket = (io) => {
    io.on('connection', (socket) => {
        console.log('User connected to server:', socket.id);

        // Join group
        socket.on('join_group', (groupName) => {
            socket.join(groupName);
            console.log(`${socket.id} joined group: ${groupName}`);

            // Send existing messages when joining the group
            const query = `SELECT sender_id, content FROM messages WHERE group_name = ? ORDER BY created_at ASC`;
            mobindb.query(query, [groupName], (err, result) => {
                if (err) {
                    console.error('Error fetching messages from DB:', err);
                    return;
                }
                socket.emit('initial_messages', result);  // Send the existing messages to the client
            });
        });

        // Listen for send_message and broadcast to the group
        socket.on('send_message', (data) => {
            const { groupName, sender, message } = data;

            // Save message to the database
            const query = `INSERT INTO messages (sender_id, group_name, content) VALUES (?, ?, ?)`;
            mobindb.query(query, [sender, groupName, message], (err, result) => {
                if (err) {
                    console.error('Error saving message to DB:', err);
                    return;
                }

                // Emit the message to ALL users in the group
                io.to(groupName).emit('receive_message', { sender_id: sender, content: message });  // ارسال با نام‌های صحیح
            });
        });

        socket.on('disconnect', () => {
            console.log('User disconnected from server:', socket.id);
        });
    });
};

// Define routes and ensure io is passed
userRoutes.post('/messages', (req, res) => {
    const { groupName, message, sender } = req.body;

    // Save message to the database
    const query = `INSERT INTO messages (sender_id, group_name, content) VALUES (?, ?, ?)`;
    mobindb.query(query, [sender, groupName, message], (err, result) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }

        // Emit the message via socket to the group
        req.app.get('io').to(groupName).emit('receive_message', { sender, message });

        res.status(200).json({ message: 'Message sent successfully' });
    });
});

userRoutes.get('/:groupName/messages', (req, res) => {
    const groupName = req.params.groupName;

    // سوال برای گرفتن پیام‌های گروه با group_name مشخص
    const query = `SELECT sender_id, content FROM messages WHERE group_name = ? ORDER BY created_at ASC`;

    mobindb.query(query, [groupName], (err, result) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json(result);  // ارسال نتایج به کلاینت
    });
});

// Export a function that takes io as a parameter
module.exports = (io) => {
    setupSocket(io);  // Setup the socket connection
    return userRoutes;
};








{Posts && Posts.length > 0 && Posts[CurrentIndex] && (
    Posts[CurrentIndex].image.endsWith('.mp4') ? (
      <video
        className="videopost1"
        controls
        height="200"
        width="200"
        key={Posts[CurrentIndex].post_id} // Using key to force re-render
      >
        <source src={`http://localhost:5200/uploads/${Posts[CurrentIndex].image}`} type="video/mp4" />
        مرورگر شما از پخش ویدیو پشتیبانی نمی‌کند.
      </video>
    ) : (
      <img
        src={`http://localhost:5200/uploads/${Posts[CurrentIndex].image}`}
        alt={`Post ${Posts[CurrentIndex].post_id}`}
        key={Posts[CurrentIndex].post_id} // Using key to force re-render
      />
    )
  )}